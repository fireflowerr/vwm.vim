*vwm.vim.txt*
                                                                      *vwm*

==============================================================================
CONTENTS                                                    *vwm-contents*
  1. Commands...............................................|vwm-commands|
  2. Configuration.....................................|vwm-configuration|
  3. Functions.............................................|vwm-functions|
  3. Examples...............................................|vwm-examples|
==============================================================================
COMMANDS                                                    *vwm-commands*

:VwmOpen {names}
  Opens the layout(s) specified by {name}

:VwmClose {names}
  Closes the layout(s) specified by {name}

:VwmToggle {names}
  Toggles the layout(s) specified by {name}

:VwmRefresh
  Repopulates all layouts. Can be used to reformat all open layouts back to
  their original state.

:VwmReinit
  After manual changes to g:vwm#layouts, call to re-normalize the dictionary.

:VwmCloseAll
  Close all active layouts.
==============================================================================
CONFIGURATION                                          *vwm-configuration*

g:vwm#pop_order                                              *g:vwm#pop_order*
  Population order. Controls how vwm populates layouts.
  Values:
    'both'[default] -> Layouts will be realized in a single group of
      traversals. This option should give the best performance.
    'vert' -> Layouts will be realized in two groups of traversals. First
      vertical splits will be populated, then horizontal splits.
    'horz' -> Layouts will be realized in two groups of traversals. First
      horizontal splits will be populated, then vertical splits.

  g:vwm#pop_order = 'vert' >
    ____________________
    |     |            |
    |     |            |
    |win 3|            |
    |     |            |
    |     |            |
    |     |            |
    |------------------|
    |  win 1  | win 2  |
    |_________|________|
<
  g:vwm#pop_order = 'horz' >
    ____________________
    |     |            |
    |     |            |
    |win 3|            |
    |     |            |
    |     |            |
    |     |            |
    |     |------------|
    |     |win 1 |win 2|
    |_____|______|_____|

g:vwm#layouts                                                  *g:vwm#layouts*
  A list containing layouts accessible to this plugin. See |vwm-layouts| and
  |vwm-layouts-example|.
  NOTE: Windows are created from layouts using a depth first traversal of
  the layout definition. The order of depths traversed is as follows:
  left -> right -> top -> bot.
  NOTE: Each node attribute will accept a funcref in addition to it's type.
  If a funcref is passed the value will be computed lazily.
                                                            *vwm-layouts-root*
  Each layout consists of a root node and 1 or more child nodes, where each
  node is a dictionary. A root node contains the following attributes:

  {name}: The name of a layout definition. Used in `:VwmOpen` and `:VwmClose`

  {left}[opt]: Layouts originating from the left, relative or absolute.

  {right}[opt]: Layouts originating from the right, relative or absolute.

  {top}[opt]: Layouts originating from the top, relative or absolute.

  {bot}[opt]: Layouts originating from the bot, relative or absolute.

  {opnBfr}[opt]: A list of commands to be executed before opening a
  given layout.

  {openAftr}[opt]: A list of commands to be executed before opening
  a given layout.

  {clsBfr}[opt]: A list of commands to be executed before closing a
  given layout.

  {clsAftr}[opt]: A list of commands to be executed before closing
  given layout.

  {init}[opt]: A list of commands to run on buffer creation. Accepts Strings
  and funcrefs.

  {restore}[opt] A list of commands to run on buffer restoration. Accepts
  Strings and funcrefs.

  {focus}[default=0]: If true, this node's window will be focused at the end
  of layout realization.
                                                           *vwm-layouts-child*
  {set}[default=['bh=hide', 'nobl']]: A list of bufferlocal settings to
  apply.
  For more info see |hidden-options|

  Each child node consists of itself and 0 more child nodes. A child node
  contains the following attributes.

  {init}[opt]: A list of commands to run on buffer creation. Accepts Strings
  and funcrefs.

  {restore}[opt]: A list of commands to run on buffer restoration. Accepts
  Strings and funcrefs.

  {v_sz}[opt]: Sets the width of the node window (same as vert resize).

  {h_sz}[opt]: Sets the height of the node window (same as resize).

  {abs}[default=true if direct descendent of root otherwise false]. If true
  , the window represented by this node will be place absolutely as opposed
  to relatively in the direction of it's orientation.

  {left}[opt]: Layout left relative of this layout.

  {right}[opt]: Layout right relative of this layout.

  {top}[opt]: Layout top relative of this layout.

  {bot}[opt]: Layout bot relative of this layout.

  {focus}[default=0]: If true, this node's window will be focused at the end
  of layout realization.

  {set}[default=['bh=hide', 'nobl']]: A list of bufferlocal settings to
  apply.
  For more info see |hidden-options|

                                                           *vwm-layouts-float*
  Floating windows require a supporting version of neovim. Verify that
  `echo exists('*nvim_open_win')` is true. Each attribute may be lazily
  defined via funcref. Each floating layout contains the following
  attributes:
  NOTE: The values here are a simple wrapper around the parameters of
  |nvim_open_win()| .

  {x}[req]: The x coordinate to place the window corner defined by anchor.

  {y}[req]: The y coordinate to place the window corner defined by anchor.

  {width}[req]: The width of the floating window.

  {height}[req]: The height of the floating window.

  {relative}[default=editor]: Use the coordinate space of the editor or the
  current window. The other possible value is `win`.

  {focusable}[default=1]: If true, the floating window is focusable.

  {focus}[default=0]: If true, the floating window will be focused.

  {anchor}[default=NW]: The corner to place at coordinates (x, y). Other
  values include `NE`, `SW`, `SE`.

  {set}[default=['bh=hide', 'nobl']]: A list of bufferlocal settings to
  apply. For more info see |hidden-options| .

==============================================================================
FUNCTIONS                                                  *vwm-functions*

vwm#open(...)
  Opens the layouts passed by name or by dictionary.

vwm#close(...)
  Closes the layouts passed by name or by dictionary.

vwm#toggle(...)
  Toggles the layouts passed by name or by dictionary.

vwm#resize(...)
  Resizes a root node(s) and all of its children to their defined size.
  To resize all nodes when closing a window try >
    au! BufDelete * call vwm#resize(vwm#util#active())

vwm#refresh()
  Toggles all active layouts twice.

vwm#util#active()
  Lists all active layout nodes

vwm#util#traverse(target, bfr, aftr, horz, vert, node_type, cache)
  For developers. The heart of vwm.vim. This function is a depth-first
  traverse and do. It allows a series of actions to be performed
  recursively over a node and its children. See source code for thorough
  documentation.
==============================================================================
EXAMPLES                                                    *vwm-examples*
see https://github.com/paroxayte/vwm#examples
